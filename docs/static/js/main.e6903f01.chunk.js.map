{"version":3,"sources":["characters.service.js","Header.js","Team.js","Characters.js","Layout.js","App.js","serviceWorker.js","index.js"],"names":["CharactersContext","createContext","React","CharactersProvider","Consumer","children","props","Provider","value","getCharacters","withCharacters","WrappedComponent","CharactersService","TYPES","LIGHT","EARTH","SHADOW","FIRE","WATER","id","name","type","Header","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","Character","this","character","console","log","key","join","Component","Team","state","displayedTeam","setState","locations","prevProps","team","slice","length","Card","tag","CardHeader","CardBody","map","CardFooter","Button","clear","TRType","Characters","characters","onCharacterSelect","typeOpen","toggleType","Table","striped","borderless","hover","responsive","scope","ButtonDropdown","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","selectedTeam","availableCharacters","characterSelected","prevState","filter","find","_character","Container","light","UncontrolledDropdown","nav","inNavbar","right","divider","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6903f01.chunk.js","sourcesContent":["// auth-service.jsx\nimport React from 'react';\n\nconst { createContext, } = React\n\nexport const CharactersContext = createContext(null);\n\nexport const CharactersConsumer = CharactersContext.Consumer\n\nexport const CharactersProvider = ({ children, props = {} }) => <CharactersContext.Provider value={{\n  getCharacters,\n  ...props\n}}>\n  {children}\n</CharactersContext.Provider>\n\nexport const withCharacters = WrappedComponent => props => <CharactersContext.Consumer>{CharactersService =>\n  <WrappedComponent CharactersService={CharactersService} {...props} />\n}</CharactersContext.Consumer>\n\nexport const TYPES = {\n  LIGHT: 1,\n  EARTH: 2,\n  SHADOW: 4,\n  FIRE: 8,\n  WATER: 16,\n}\n\nconst getCharacters = () => [\n  { id: 1, name: 'Alda', type: TYPES.LIGHT, },\n  { id: 2, name: 'Angelica', type: TYPES.EARTH, },\n  { id: 3, name: 'Arcana', type: TYPES.SHADOW, },\n  { id: 4, name: 'Atlantus', type: TYPES.FIRE, },\n  { id: 5, name: 'Bat', type: TYPES.WATER, },\n  { id: 6, name: 'Big Eye', type: TYPES.LIGHT, },\n  { id: 7, name: 'Black Beard', type: TYPES.LIGHT, },\n  { id: 8, name: 'Blue Fish', type: TYPES.LIGHT, },\n  { id: 9, name: 'Bugonaut Archer', type: TYPES.LIGHT, },\n  { id: 10, name: 'Bugonaut Fighter', type: TYPES.LIGHT, },\n  { id: 11, name: 'Bugonaut Giant', type: TYPES.LIGHT, },\n  { id: 12, name: 'Bugonaut Spear', type: TYPES.LIGHT, },\n  { id: 13, name: 'Chaos', type: TYPES.LIGHT, },\n  { id: 14, name: 'Dark Hunter', type: TYPES.LIGHT, },\n  { id: 15, name: 'Dark Knight', type: TYPES.LIGHT, },\n  { id: 16, name: 'Dark Wolf', type: TYPES.LIGHT, },\n  { id: 17, name: 'Fire Monk', type: TYPES.LIGHT, },\n  { id: 18, name: 'Furiosa', type: TYPES.LIGHT, },\n  { id: 19, name: 'Gladiator', type: TYPES.LIGHT, },\n  { id: 20, name: 'Goddess', type: TYPES.LIGHT, },\n  { id: 21, name: 'Gold Knight', type: TYPES.LIGHT, },\n  { id: 22, name: 'Green Faery', type: TYPES.LIGHT },\n  { id: 23, name: 'Groovine', type: TYPES.LIGHT, },\n  { id: 24, name: 'Hikari', type: TYPES.LIGHT, },\n  { id: 25, name: 'Ice Cube', type: TYPES.LIGHT, },\n]\n","import React, { useState, } from 'react'\nimport {\n  Nav,/* NavItem, NavLink,*/\n  Navbar/*, NavbarText*/, NavbarBrand, NavbarToggler,\n  // UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem,\n  Collapse,\n} from 'reactstrap'\n\nconst Header = () => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const toggle = () => setIsOpen(!isOpen)\n\n  return <header>\n    <Navbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"/\">CTA-Simulator</NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"mr-auto\" navbar>\n          {/* <NavItem>\n          <NavLink href=\"/components/\">Components</NavLink>\n        </NavItem> */}\n          {/* <NavItem>\n          <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n        </NavItem> */}\n          {/* <UncontrolledDropdown nav inNavbar>\n          <DropdownToggle nav caret>\n            Options\n          </DropdownToggle>\n          <DropdownMenu right>\n            <DropdownItem>\n              Option 1\n            </DropdownItem>\n            <DropdownItem>\n              Option 2\n            </DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem>\n              Reset\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown> */}\n        </Nav>\n        {/* <NavbarText>Simple Text</NavbarText> */}\n      </Collapse>\n    </Navbar>\n  </header>\n}\n\nexport default Header\n","import React from 'react'\nimport {\n  Card, CardHeader, CardBody, CardFooter,\n\n  Button,\n} from 'reactstrap'\n\nimport './MyTeam.scss'\nimport './Character.scss'\n\nimport { withCharacters, TYPES } from './characters.service'\n\nclass Character extends React.Component {\n  render() {\n    const { character, className, } = this.props\n\n    const type = !character.type ? 'empty'\n      : character.type & TYPES.LIGHT ? 'light'\n        : character.type & TYPES.EARTH ? 'earth'\n          : character.type & TYPES.SHADOW ? 'shadow'\n            : character.type & TYPES.FIRE ? 'fire'\n              : character.type & TYPES.WATER ? 'water'\n                : 'undefined'\n\n    console.log(character.type, TYPES)\n    // const type = character.id ? character.type : 'empty'\n\n    return <div key={character} className={['Character', type, className].join(' ')}>\n      {character.id\n        ? <div>{character.id}</div>\n        : <div>&#10010;</div>}\n\n    </div>\n  }\n}\n\nclass Team extends React.Component {\n  static locations = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n\n  state = {\n    displayedTeam: []\n  }\n\n  componentDidMount() {\n    this.setState({\n      displayedTeam: Team.locations\n    })\n  }\n\n  componentDidUpdate(prevProps, ) {\n    const { team } = this.props\n    if (team !== prevProps.team) {\n      this.setState({\n        displayedTeam: [...team, ...Team.locations.slice(team.length)]\n      })\n    }\n  }\n\n  render() {\n    const {\n      displayedTeam,\n    } = this.state\n\n    return <Card tag=\"section\">\n      <CardHeader tag=\"h4\">Equipe</CardHeader>\n      <CardBody>\n        <div className=\"Characters\">\n          {displayedTeam.map(character =>\n            <Character key={character.id} character={character} className=\"w-25 px-1\" />)}\n        </div>\n      </CardBody>\n      <CardFooter className=\"d-flex\">\n        <Button type=\"button\"\n          className=\"ml-auto\"\n          onClick={this.clear}>Nettoyer</Button>\n      </CardFooter>\n    </Card>\n  }\n}\n\n\nexport default withCharacters(Team)\n","import React, { useState, } from 'react'\nimport {\n  Table,\n  Button,\n  Card, CardHeader, CardBody,\n\n  ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem,\n} from 'reactstrap'\n\nimport { TYPES } from './characters.service'\n\nconst TRType = ({ type }) => <>{!type ? 'empty'\n  : type & TYPES.LIGHT ? 'light'\n    : type & TYPES.EARTH ? 'earth'\n      : type & TYPES.SHADOW ? 'shadow'\n        : type & TYPES.FIRE ? 'fire'\n          : type & TYPES.WATER ? 'water'\n            : 'undefined'}</>\n\nconst Characters = ({ characters, onCharacterSelect = () => { } }) => {\n  const [typeOpen, toggleType] = useState(false)\n\n  return <Card tag=\"section\">\n    <CardHeader tag=\"h4\">Personnages</CardHeader>\n    <CardBody className=\"p-0\">\n      <Table striped borderless hover responsive>\n        <thead>\n          <tr>\n            <th scope=\"col\"></th>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">\n              <ButtonDropdown isOpen={typeOpen} toggle={() => toggleType(!typeOpen)}>\n                <DropdownToggle caret>\n                  filtre types\n                </DropdownToggle>\n                <DropdownMenu>\n                  {/* <DropdownItem header>Header</DropdownItem> */}\n                  {/* <DropdownItem disabled>Action</DropdownItem> */}\n                  {/* <DropdownItem>Another Action</DropdownItem> */}\n                  {/* <DropdownItem divider /> */}\n                  <DropdownItem>eau</DropdownItem>\n                  <DropdownItem>terre</DropdownItem>\n                  <DropdownItem>feu</DropdownItem>\n                  <DropdownItem>lumiere</DropdownItem>\n                  <DropdownItem>tenebre</DropdownItem>\n                </DropdownMenu>\n              </ButtonDropdown>\n            </th>\n            <th scope=\"col\">\n              <ButtonDropdown isOpen={typeOpen} toggle={() => toggleType(!typeOpen)}>\n                <DropdownToggle caret>\n                  filtre metier\n                </DropdownToggle>\n                <DropdownMenu>\n                  <DropdownItem>bagarreur</DropdownItem>\n                  <DropdownItem>barbare</DropdownItem>\n                  <DropdownItem>chevalier</DropdownItem>\n                  <DropdownItem>voleur</DropdownItem>\n                  <DropdownItem>lancier</DropdownItem>\n                  <DropdownItem>samurai</DropdownItem>\n                  <DropdownItem>archer</DropdownItem>\n                  <DropdownItem>margicien</DropdownItem>\n                  <DropdownItem>tireur</DropdownItem>\n                  <DropdownItem>support</DropdownItem>\n                </DropdownMenu>\n              </ButtonDropdown>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {characters.map(character => <tr key={character.id}>\n            <td><Button\n              type=\"button\"\n              color=\"primary\"\n              onClick={() => onCharacterSelect(character)}>Ajouter</Button></td>\n            <th scope=\"row\" className=\"align-middle text-nowrap\">{character.name}</th>\n            <td className=\"align-middle\"><TRType type={character.type} /></td>\n            <td className=\"align-middle\"><TRType type={character.type} /></td>\n          </tr>)}\n        </tbody>\n      </Table>\n    </CardBody>\n  </Card>\n}\n\nexport default Characters\n","import React from 'react'\nimport {\n  Container,\n  Card, CardHeader, CardBody,\n\n\n  Nav,/* NavItem, NavLink,*/\n  Navbar/*, NavbarText, NavbarBrand*/, NavbarToggler,\n  UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem,\n  Collapse,\n} from 'reactstrap'\n\nimport './App.scss'\n\nimport { withCharacters, } from './characters.service'\n\nimport Team from './Team'\nimport Characters from './Characters'\n\nclass Layout extends React.Component {\n  state = {\n    isOpen: false,\n    selectedTeam: [],\n    availableCharacters: [],\n  }\n\n  componentDidMount() {\n    const { CharactersService, } = this.props\n    this.setState({\n      availableCharacters: CharactersService.getCharacters()\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { CharactersService, } = this.props\n    const { selectedTeam, } = this.state\n    if (selectedTeam !== prevState.selectedTeam) {\n      this.setState({\n        availableCharacters: CharactersService.getCharacters().filter(character =>\n          selectedTeam.find(_character => _character.id !== character.id)\n        )\n      })\n    }\n  }\n\n  onCharacterSelect = characterSelected => {\n    this.setState(state => ({\n      selectedTeam: [...state.selectedTeam, characterSelected]\n    }))\n  }\n\n  render() {\n    const { isOpen, selectedTeam, availableCharacters, } = this.state\n\n    const toggle = () => this.setState({ isOpen: !isOpen })\n\n    return <Container tag=\"main\">\n      <Navbar color=\"\" light expand=\"xs\">\n        {/* <NavbarBrand href=\"/\">CTA-Simulator</NavbarBrand> */}\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Options\n            </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  Option 1\n              </DropdownItem>\n                <DropdownItem>\n                  Option 2\n              </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Reset\n              </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n        </Collapse>\n      </Navbar>\n\n      <div className=\"d-flex mb-4\">\n        <Team team={selectedTeam} />\n        <Card tag=\"section\" className=\"flex-fill ml-3\">\n          <CardHeader tag=\"h4\">Result</CardHeader>\n          <CardBody>\n            Att: xxx\n            Def: xxx\n            </CardBody>\n        </Card>\n      </div>\n      <Characters\n        characters={availableCharacters}\n        onCharacterSelect={this.onCharacterSelect} />\n    </Container>\n  }\n}\n\nexport default withCharacters(Layout)\n","import React from 'react'\nimport {\n} from 'reactstrap'\n\nimport './App.scss'\n\nimport { CharactersProvider, } from './characters.service'\n\nimport Header from './Header'\nimport Layout from './Layout'\n\nclass App extends React.Component {\n  render() {\n    return <CharactersProvider>\n      <div className=\"App pb-4\">\n        <Header />\n        <Layout />\n      </div>\n    </CharactersProvider>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom-bootstrap.scss';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}